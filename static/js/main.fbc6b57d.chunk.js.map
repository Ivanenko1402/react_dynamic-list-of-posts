{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","targetPost","isOpen","setTargetPost","setIsOpen","booleanValue","className","map","post","id","title","type","onClick","hendleClick","Loader","NewCommentForm","isAdding","addComment","postId","useState","name","setName","email","setEmail","body","setbody","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","onSubmit","e","preventDefault","htmlFor","placeholder","classNames","value","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","PostDetails","comments","setComments","showError","setShowError","isLoading","setIsLoading","isOpenForm","setIsOpenForm","setIsAdding","getComments","a","allComments","commentData","prev","commentId","filter","comment","error","useEffect","length","href","deleteComment","val","UserSelector","setTrgetUserId","showUsers","setShowUsers","users","setUsers","targetUser","setTargetUser","allUsers","getUser","role","user","event","selectedUser","App","targetUserId","setTargetUserId","setPosts","getPosts","userId","userPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbc6b57d.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | null;\n  targetPost: Post | null;\n  isOpen: boolean;\n  setTargetPost: (post: Post | null) => void;\n  setIsOpen: (val: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  targetPost,\n  isOpen,\n  setTargetPost,\n  setIsOpen,\n}) => {\n  const hendleClick = (post: Post) => {\n    if (!targetPost) {\n      setTargetPost(post);\n      setIsOpen(true);\n\n      return;\n    }\n\n    if (targetPost.id === post.id) {\n      setTargetPost(null);\n      setIsOpen(false);\n\n      return;\n    }\n\n    setTargetPost(post);\n  };\n\n  const booleanValue = isOpen && targetPost;\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts?.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr key={id} data-cy=\"Post\">\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={\n                      (booleanValue && targetPost.id === post.id)\n                        ? 'button is-link'\n                        : 'button is-link is-light'\n                    }\n                    onClick={() => hendleClick(post)}\n                  >\n                    {\n                      booleanValue && targetPost.id === post.id\n                        ? 'Close' : 'Open'\n                    }\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  isAdding: boolean;\n  addComment: (comment: Comment) => void;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  isAdding,\n  addComment,\n  postId,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setbody] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [bodyError, setBodyError] = useState(false);\n\n  function submitForm(event: React.FormEvent) {\n    event.preventDefault();\n\n    if (!name) {\n      setNameError(true);\n\n      return;\n    }\n\n    if (!email) {\n      setEmailError(true);\n\n      return;\n    }\n\n    if (!body) {\n      setBodyError(true);\n\n      return;\n    }\n\n    const newComment: Comment = {\n      id: 0,\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    addComment(newComment);\n    setbody('');\n  }\n\n  const changeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setNameError(false);\n  };\n\n  const changeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setEmailError(false);\n  };\n\n  const changebody = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setbody(event.target.value);\n    setBodyError(false);\n  };\n\n  const resetAll = () => {\n    setName('');\n    setEmail('');\n    setbody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={e => submitForm(e)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"body\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={\n              classNames('input', {\n                'is-danger': nameError,\n              })\n            }\n            value={name}\n            onChange={(e) => changeName(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-body-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"body\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={\n              classNames('input', {\n                'is-danger': emailError,\n              })\n            }\n            value={email}\n            onChange={e => changeEmail(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-body-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p\n            className={\n              classNames('help', {\n                'is-danger': emailError,\n              })\n            }\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment body\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-text\"\n            name=\"text\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': bodyError,\n            })}\n            value={body}\n            onChange={e => changebody(e)}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={\n              classNames(\n                'button is-link', {\n                  'is-loading': isAdding,\n                },\n              )\n            }\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={() => resetAll()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  targetPost: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  targetPost,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [showError, setShowError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpenForm, setIsOpenForm] = useState(false);\n\n  const [isAdding, setIsAdding] = useState(false);\n\n  async function getComments(postId: number) {\n    setIsLoading(true);\n    const url = `/comments?postId=${postId}`;\n\n    try {\n      const allComments: Comment[] = await client.get(url);\n\n      setComments(allComments);\n    } catch (error) {\n      setShowError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function addComment(commentData: Comment) {\n    setIsAdding(true);\n\n    try {\n      await client.post('/comments', commentData);\n      setComments(prev => [...prev, commentData]);\n      getComments(targetPost.id);\n    } catch (error) {\n      setShowError(true);\n    } finally {\n      setIsAdding(false);\n      setShowError(false);\n    }\n  }\n\n  async function deleteComment(commentId: number) {\n    const url = `/comments/${commentId}`;\n\n    await client.delete(url);\n\n    try {\n      setComments(prev => prev.filter(comment => comment.id !== commentId));\n    } catch (error) {\n      setShowError(true);\n    }\n\n    setShowError(false);\n  }\n\n  useEffect(() => {\n    getComments(targetPost.id);\n    setIsOpenForm(false);\n  }, [targetPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${targetPost.id}: ${targetPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {targetPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {showError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoading && !comments.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isLoading && comments.length > 0 && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {!isLoading && comments.map(comment => {\n            const {\n              id,\n              email,\n              body,\n              name,\n            } = comment;\n\n            return (\n              <article\n                key={id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a\n                    href={`mailto:${email}`}\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {body}\n                </div>\n              </article>\n            );\n          })}\n\n          {(!isLoading && !isOpenForm) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsOpenForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isOpenForm && (\n          <NewCommentForm\n            isAdding={isAdding}\n            addComment={(val) => addComment(val)}\n            postId={targetPost.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  setShowError: (val: boolean) => void,\n  setTrgetUserId: (num: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  setShowError,\n  setTrgetUserId,\n}) => {\n  const [showUsers, setShowUsers] = useState<boolean>(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [targetUser, setTargetUser] = useState<User | null>(null);\n\n  async function getUser() {\n    const url = '/users';\n\n    try {\n      const allUsers: User[] = await client.get(url);\n\n      setUsers(allUsers);\n      setShowError(false);\n    } catch (error) {\n      setShowError(true);\n    }\n  }\n\n  useEffect(() => {\n    if (!targetUser) {\n      return;\n    }\n\n    setTrgetUserId(targetUser.id);\n  }, [targetUser]);\n\n  useEffect(() => {\n    getUser();\n  }, []);\n\n  const selectedUser = (\n    event: React.MouseEvent,\n    user: User,\n  ) => {\n    event.preventDefault();\n    setShowUsers(false);\n    setTargetUser(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setShowUsers(!showUsers)}\n        >\n          <span>\n            {targetUser ? targetUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {showUsers && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map((user) => {\n              const { id, name } = user;\n\n              return (\n                <a\n                  key={id}\n                  href={`#user-${id}`}\n                  className=\"dropdown-item\"\n                  onClick={(e) => selectedUser(e, user)}\n                >\n                  {name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [showError, setShowError] = useState<boolean>(false);\n  const [targetUserId, setTargetUserId] = useState<number | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [targetPost, setTargetPost] = useState<Post | null>(null);\n  const [isOpenForm, setIsOpenForm] = useState(false);\n\n  const getPosts = async (userId: number) => {\n    setIsLoading(true);\n    const url = `/posts?userId=${userId}`;\n\n    const userPosts: Post[] = await client.get(url);\n\n    try {\n      setPosts(userPosts);\n      setShowError(false);\n    } catch (error) {\n      setShowError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!targetUserId) {\n      return;\n    }\n\n    getPosts(targetUserId);\n    setTargetPost(null);\n    setIsOpenForm(false);\n  }, [targetUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setShowError={setShowError}\n                  setTrgetUserId={setTargetUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!targetUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {showError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {\n                  (!isLoading && !posts.length && targetUserId)\n                    && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )\n                }\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    targetPost={targetPost}\n                    isOpen={isOpenForm}\n                    setTargetPost={setTargetPost}\n                    setIsOpen={setIsOpenForm}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': targetPost && isOpenForm,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {targetPost && <PostDetails targetPost={targetPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}